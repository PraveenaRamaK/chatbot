#!/bin/bash

# Configurations
SCHEMA_FILE="schemas.txt"       # Schema file format: schema_name|hdfs_location
KEYWORDS_FILE="keywords.txt"    # Keywords file, each keyword on a new line
OUTPUT_FILE="schema_report.html" # Output HTML file
JDBC_URL="jdbc:hive2://your_hive_server:port" # JDBC URL for Beeline
SIZE_THRESHOLD=$((450 * 1024 * 1024 * 1024)) # 450 GB in bytes
DATE_THRESHOLD=$(date -d "90 days ago" +%s)  # 90 days ago timestamp

# Initialize the HTML report
echo "<html><head><title>Schema Report</title></head><body>" > $OUTPUT_FILE
echo "<h1>Schema Report</h1>" >> $OUTPUT_FILE

# Read keywords into an array and prepare regex pattern
mapfile -t keywords < "$KEYWORDS_FILE"
regex_pattern=$(IFS=\|; echo "${keywords[*]}")  # Create regex pattern

# Function to check if a table name contains any keyword
contains_keyword() {
    local table_name="$1"
    [[ "$table_name" =~ (^|[-_])($regex_pattern)([-_]|$) ]] && return 0
    return 1
}

# Function to convert bytes to a human-readable format
convert_size() {
    local bytes=$1
    if (( bytes < 1024 )); then
        echo "${bytes} B"
    elif (( bytes < 1048576 )); then
        echo "$((bytes / 1024)) KB"
    elif (( bytes < 1073741824 )); then
        echo "$((bytes / 1048576)) MB"
    else
        echo "$((bytes / 1073741824)) GB"
    fi
}

# Loop through each schema and its HDFS location
while IFS="|" read -r schema hdfs_location; do
    schema_keyword_total_size=0  # Track total size for all keyword-matched tables in bytes

    # Query all tables in the schema using Beeline
    tables=$(beeline -u "$JDBC_URL" --outputformat=tsv2 -e "USE $schema; SHOW TABLES;" 2>/dev/null | tail -n +3)

    # Start gathering schema information to display in HTML
    table_html=""
    while IFS= read -r table; do
        # Skip empty lines
        [ -z "$table" ] && continue

        # Check if the table matches the keywords
        if ! contains_keyword "$table"; then
            continue  # Skip this table if it does not match any keyword
        fi

        # Extract table name without schema prefix (if in the form schema.table)
        table_name="${table##*.}"

        # Determine if it's a Table or View
        table_type=$(beeline -u "$JDBC_URL" --outputformat=tsv2 -e "USE $schema; DESCRIBE FORMATTED $table;" 2>/dev/null | grep -i "Table Type" | awk '{print $3}')
        if [[ "$table_type" == "VIEW" ]]; then
            table_size="N/A"
            last_modified="N/A"
            highlight_row=""
        else
            # Get table size in bytes from HDFS
            table_location="$hdfs_location/$table_name"
            table_size_bytes=$(hdfs dfs -du -s "$table_location" 2>/dev/null | awk '{print $1}')
            table_size=$(convert_size "$table_size_bytes")
            schema_keyword_total_size=$((schema_keyword_total_size + table_size_bytes))  # Add to total for keyword-matched tables

            # Get last modified time and convert it to a timestamp
            last_modified=$(hdfs dfs -stat "%y" "$table_location" 2>/dev/null)
            last_modified_timestamp=$(date -d "$last_modified" +%s 2>/dev/null)

            # Highlight row based on size and last modified date
            if (( table_size_bytes > SIZE_THRESHOLD )); then
                highlight_row=" style='font-weight:bold; color:red;'"  # Bold and red if size exceeds threshold
            elif (( last_modified_timestamp < DATE_THRESHOLD )); then
                highlight_row=" style='font-weight:bold; color:red;'"  # Bold and red if older than 90 days
            else
                highlight_row=""
            fi
        fi

        # Add table info to HTML
        table_html+="<tr$highlight_row><td>$table</td><td>$table_type</td><td>$table_size</td><td>$last_modified</td></tr>"
    done <<< "$tables"

    # Convert total keyword-matched table size to human-readable format
    schema_keyword_total_size_human=$(convert_size "$schema_keyword_total_size")

    # Output schema heading with total size of keyword-matched tables and add table rows
    echo "<h2>Schema Name: $schema (Total Size of Keyword-Matched Tables: $schema_keyword_total_size_human)</h2>" >> $OUTPUT_FILE
    echo "<table border='1' cellpadding='5' cellspacing='0'>" >> $OUTPUT_FILE
    echo "<tr><th>Table Name</th><th>Type</th><th>Size</th><th>Last Modified</th></tr>" >> $OUTPUT_FILE
    echo "$table_html" >> $OUTPUT_FILE
    echo "</table><br>" >> $OUTPUT_FILE

done < "$SCHEMA_FILE"

# Finalize the HTML report
echo "</body></html>" >> $OUTPUT_FILE

# Display completion message
echo "Schema report generated: $OUTPUT_FILE"
