#!/bin/bash

# File containing the list of tables
TABLE_FILE="tables.txt"

# Check if file exists
if [[ ! -f "$TABLE_FILE" ]]; then
    echo "Table file not found!"
    exit 1
fi

# Function to drop partitions from a table
drop_partitions() {
    local table=$1

    # Fetch all available partitions for the table using TSV format for cleaner output
    echo "Fetching partitions for table: $table"
    
    partitions=$(beeline --outputformat=tsv2 -e "SHOW PARTITIONS $table;" 2>/dev/null)

    # Clean up the partitions and store them in an array
    cleaned_partitions=($(echo "$partitions" | sed "s/|//g" | sed 's/^[ \t]*//;s/[ \t]*$//' | grep -E "^load_date="))

    # Check how many partitions we have
    partition_count=${#cleaned_partitions[@]}

    if [[ $partition_count -eq 0 ]]; then
        echo "No partitions found for table: $table"
        return
    fi

    if [[ $partition_count -gt 3 ]]; then
        # More than 3 partitions, perform bulk deletion using the first partition's date
        first_partition="${cleaned_partitions[0]}"
        first_partition_date=$(echo "$first_partition" | cut -d '=' -f 2)
        
        # Construct the bulk DROP PARTITION command
        SQL_CMD="ALTER TABLE $table DROP PARTITION (load_date >= '$first_partition_date') PURGE;"
        echo "Executing bulk partition deletion: $SQL_CMD"

        # Execute the command using Beeline
        beeline --outputformat=tsv2 -e "$SQL_CMD"

        # Check if the command was successful
        if [[ $? -eq 0 ]]; then
            echo "Successfully dropped partitions from load_date >= $first_partition_date from table $table"
        else
            echo "Failed to drop partitions from table $table"
        fi
    else
        # Less than or equal to 3 partitions, delete them one by one
        for partition in "${cleaned_partitions[@]}"; do
            echo "Dropping partition $partition from table $table"
            
            # Convert partition into correct SQL format
            formatted_partition=$(echo "$partition" | sed "s/=/='/g" | sed "s/\//', /g" | sed "s/$/'/g")

            # Construct the ALTER TABLE command to drop the partition
            SQL_CMD="ALTER TABLE $table DROP PARTITION ($formatted_partition) PURGE;"
            echo "Executing: $SQL_CMD"

            # Execute the command using Beeline
            beeline --outputformat=tsv2 -e "$SQL_CMD"

            # Check if the command was successful
            if [[ $? -eq 0 ]]; then
                echo "Successfully dropped partition $partition from table $table"
            else
                echo "Failed to drop partition $partition from table $table"
            fi
        done
    fi
}

# Iterate over each table name in the file
while IFS= read -r TABLE_NAME; do
    if [[ -n "$TABLE_NAME" ]]; then
        # Call the function to drop partitions for the current table
        drop_partitions "$TABLE_NAME"
    fi
done < "$TABLE_FILE"
